{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StatusBar } from \"expo-status-bar\";\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport GameOver from \"./components/GameOver\";\nimport GameScreen from \"./components/GameScreen\";\nimport Header from \"./components/Header\";\nimport SmartScreen from \"./components/SmartScreen\";\nimport * as Font from \"expo-font\";\nimport AppLoading from 'expo-app-loading';\n\nvar fetchfonts = function fetchfonts() {\n  return Font.loadAsync({\n    \"open-sans\": require(\"./assets/fonts/OpenSans-Regular.ttf\"),\n    \"open-sans-bold\": require(\"./assets/fonts/OpenSans-Bold.ttf\")\n  });\n};\n\nexport default function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      dataLoaded = _useState2[0],\n      setdataLoaded = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      userNumber = _useState4[0],\n      setUserNumber = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      guessRounds = _useState6[0],\n      setguessRounds = _useState6[1];\n\n  if (!dataLoaded) {\n    return React.createElement(AppLoading, {\n      startAsync: fetchfonts,\n      onFinish: function onFinish() {\n        setdataLoaded(true);\n      },\n      onError: console.warn\n    });\n  }\n\n  var startGameHandler = function startGameHandler(selectedNumber) {\n    setUserNumber(selectedNumber);\n    setguessRounds(0);\n  };\n\n  var restart = function restart() {\n    setguessRounds(0);\n    setUserNumber(null);\n  };\n\n  var gameOver = function gameOver(numOfRounds) {\n    setguessRounds(numOfRounds);\n  };\n\n  var content = React.createElement(SmartScreen, {\n    onStartGame: startGameHandler\n  });\n\n  if (userNumber && guessRounds <= 0) {\n    content = React.createElement(GameScreen, {\n      userChoice: userNumber,\n      onGameOver: gameOver\n    });\n  } else if (guessRounds > 0) {\n    content = React.createElement(GameOver, {\n      roundsNumber: guessRounds,\n      userNumber: userNumber,\n      restart: restart\n    });\n  }\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(Header, {\n    title: \"Guess a Number\"\n  }), content);\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["/home/developer/Desktop/akash-demo/App.js"],"names":["StatusBar","React","useState","GameOver","GameScreen","Header","SmartScreen","Font","AppLoading","fetchfonts","loadAsync","require","App","dataLoaded","setdataLoaded","userNumber","setUserNumber","guessRounds","setguessRounds","console","warn","startGameHandler","selectedNumber","restart","gameOver","numOfRounds","content","styles","container","StyleSheet","create","flex"],"mappings":";AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;AAEA,OAAOC,QAAP;AACA,OAAOC,UAAP;AACA,OAAOC,MAAP;AACA,OAAOC,WAAP;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,SAAOF,IAAI,CAACG,SAAL,CAAe;AACpB,iBAAaC,OAAO,uCADA;AAEpB,sBAAkBA,OAAO;AAFL,GAAf,CAAP;AAID,CALD;;AAMA,eAAe,SAASC,GAAT,GAAe;AAC5B,kBAAoCV,QAAQ,CAAC,KAAD,CAA5C;AAAA;AAAA,MAAOW,UAAP;AAAA,MAAmBC,aAAnB;;AACA,mBAAoCZ,QAAQ,EAA5C;AAAA;AAAA,MAAOa,UAAP;AAAA,MAAmBC,aAAnB;;AACA,mBAAsCd,QAAQ,CAAC,CAAD,CAA9C;AAAA;AAAA,MAAOe,WAAP;AAAA,MAAoBC,cAApB;;AAEA,MAAI,CAACL,UAAL,EAAiB;AACf,WACE,oBAAC,UAAD;AACE,MAAA,UAAU,EAAEJ,UADd;AAEE,MAAA,QAAQ,EAAE,oBAAM;AAACK,QAAAA,aAAa,CAAC,IAAD,CAAb;AAAoB,OAFvC;AAGE,MAAA,OAAO,EAAEK,OAAO,CAACC;AAHnB,MADF;AAOD;;AAED,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,cAAD,EAAoB;AAC3CN,IAAAA,aAAa,CAACM,cAAD,CAAb;AACAJ,IAAAA,cAAc,CAAC,CAAD,CAAd;AACD,GAHD;;AAIA,MAAMK,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpBL,IAAAA,cAAc,CAAC,CAAD,CAAd;AACAF,IAAAA,aAAa,CAAC,IAAD,CAAb;AACD,GAHD;;AAIA,MAAMQ,QAAQ,GAAG,SAAXA,QAAW,CAACC,WAAD,EAAiB;AAChCP,IAAAA,cAAc,CAACO,WAAD,CAAd;AACD,GAFD;;AAGA,MAAIC,OAAO,GAAG,oBAAC,WAAD;AAAa,IAAA,WAAW,EAAEL;AAA1B,IAAd;;AACA,MAAIN,UAAU,IAAIE,WAAW,IAAI,CAAjC,EAAoC;AAClCS,IAAAA,OAAO,GAAG,oBAAC,UAAD;AAAY,MAAA,UAAU,EAAEX,UAAxB;AAAoC,MAAA,UAAU,EAAES;AAAhD,MAAV;AACD,GAFD,MAEO,IAAIP,WAAW,GAAG,CAAlB,EAAqB;AAC1BS,IAAAA,OAAO,GACL,oBAAC,QAAD;AACE,MAAA,YAAY,EAAET,WADhB;AAEE,MAAA,UAAU,EAAEF,UAFd;AAGE,MAAA,OAAO,EAAEQ;AAHX,MADF;AAOD;;AACD,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEI,MAAM,CAACC;AAApB,KACE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC;AAAd,IADF,EAEGF,OAFH,CADF;AAMD;AAED,IAAMC,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,SAAS,EAAE;AACTG,IAAAA,IAAI,EAAE;AADG;AADoB,CAAlB,CAAf","sourcesContent":["import { StatusBar } from \"expo-status-bar\";\nimport React, { useState } from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport GameOver from \"./components/GameOver\";\nimport GameScreen from \"./components/GameScreen\";\nimport Header from \"./components/Header\";\nimport SmartScreen from \"./components/SmartScreen\";\nimport * as Font from \"expo-font\";\nimport AppLoading from 'expo-app-loading';\nconst fetchfonts = () => {\n  return Font.loadAsync({\n    \"open-sans\": require(\"./assets/fonts/OpenSans-Regular.ttf\"),\n    \"open-sans-bold\": require(\"./assets/fonts/OpenSans-Bold.ttf\"),\n  });\n};\nexport default function App() {\n  const [dataLoaded, setdataLoaded] = useState(false);\n  const [userNumber, setUserNumber] = useState();\n  const [guessRounds, setguessRounds] = useState(0);\n\n  if (!dataLoaded) {\n    return (\n      <AppLoading\n        startAsync={fetchfonts}\n        onFinish={() => {setdataLoaded(true)}}\n        onError={console.warn}\n      />\n    );\n  }\n\n  const startGameHandler = (selectedNumber) => {\n    setUserNumber(selectedNumber);\n    setguessRounds(0);\n  };\n  const restart = () => {\n    setguessRounds(0);\n    setUserNumber(null);\n  };\n  const gameOver = (numOfRounds) => {\n    setguessRounds(numOfRounds);\n  };\n  let content = <SmartScreen onStartGame={startGameHandler} />;\n  if (userNumber && guessRounds <= 0) {\n    content = <GameScreen userChoice={userNumber} onGameOver={gameOver} />;\n  } else if (guessRounds > 0) {\n    content = (\n      <GameOver\n        roundsNumber={guessRounds}\n        userNumber={userNumber}\n        restart={restart}\n      />\n    );\n  }\n  return (\n    <View style={styles.container}>\n      <Header title=\"Guess a Number\" />\n      {content}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    // backgroundColor: '#fff',\n    // alignItems: 'center',\n    // justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}