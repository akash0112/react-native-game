{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this;\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Card from \"./Card\";\nimport NumberContiner from \"./NumberContiner\";\n\nvar generatebetween = function generatebetween(min, max, exclude) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  var random = Math.floor(Math.random() * (max - min)) + min;\n\n  if (random === exclude) {\n    return generatebetween(min, max, exclude);\n  } else {\n    return random;\n  }\n};\n\nvar GameScreen = function GameScreen(props) {\n  var _useState = useState(generatebetween(1, 100, props.userChoice)),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentGuess = _useState2[0],\n      setCurrentGuess = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      rounds = _useState4[0],\n      setrounds = _useState4[1];\n\n  var currentLow = useRef(1);\n  var currentHigh = useRef(100);\n  var userChoice = props.userChoice,\n      onGameOver = props.onGameOver;\n  useEffect(function () {\n    console.log(currentGuess, userChoice);\n\n    if (currentGuess === userChoice) {\n      onGameOver(rounds);\n    }\n  }, [currentGuess, onGameOver, userChoice]);\n\n  var nextguessHandler = function nextguessHandler(direction) {\n    if (direction === \"lower\" && currentGuess < props.userChoice || direction === \"greater\" && currentGuess > props.userChoice) {\n      Alert.alert(\"dont Lie\", \"You know that this is wrong...\", [{\n        text: \"sorry\",\n        style: \"cancel\"\n      }]);\n      return;\n    }\n\n    if (direction === \"lower\") {\n      currentHigh.current = currentGuess;\n    } else {\n      currentLow.current = currentGuess;\n    }\n\n    var nextnumber = generatebetween(currentLow.current, currentHigh.current, currentGuess);\n    setCurrentGuess(nextnumber);\n    setrounds(function (currounds) {\n      return currounds + 1;\n    });\n  };\n\n  return React.createElement(View, {\n    style: styles.screen\n  }, React.createElement(Text, null, \"Opponent Guess\"), React.createElement(NumberContiner, null, currentGuess), React.createElement(Card, {\n    style: styles.buttonContainer\n  }, React.createElement(Button, {\n    title: \"LOWER\",\n    onPress: nextguessHandler.bind(_this, \"lower\")\n  }), React.createElement(Button, {\n    title: \"GREATER\",\n    onPress: nextguessHandler.bind(_this, \"greater\")\n  })));\n};\n\nexport default GameScreen;\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 10,\n    alignItems: \"center\"\n  },\n  buttonContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    marginTop: 20,\n    width: 300,\n    maxWidth: \"80%\"\n  }\n});","map":{"version":3,"sources":["/home/developer/Desktop/akash-demo/components/GameScreen.js"],"names":["React","useRef","useState","useEffect","Card","NumberContiner","generatebetween","min","max","exclude","Math","ceil","floor","random","GameScreen","props","userChoice","currentGuess","setCurrentGuess","rounds","setrounds","currentLow","currentHigh","onGameOver","console","log","nextguessHandler","direction","Alert","alert","text","style","current","nextnumber","currounds","styles","screen","buttonContainer","bind","StyleSheet","create","flex","padding","alignItems","flexDirection","justifyContent","marginTop","width","maxWidth"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;;;;;;AAEA,OAAOC,IAAP;AACA,OAAOC,cAAP;;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD,EAAMC,GAAN,EAAWC,OAAX,EAAuB;AAC7CF,EAAAA,GAAG,GAAGG,IAAI,CAACC,IAAL,CAAUJ,GAAV,CAAN;AACAC,EAAAA,GAAG,GAAGE,IAAI,CAACE,KAAL,CAAWJ,GAAX,CAAN;AACA,MAAMK,MAAM,GAAGH,IAAI,CAACE,KAAL,CAAWF,IAAI,CAACG,MAAL,MAAiBL,GAAG,GAAGD,GAAvB,CAAX,IAA0CA,GAAzD;;AACA,MAAIM,MAAM,KAAKJ,OAAf,EAAwB;AACtB,WAAOH,eAAe,CAACC,GAAD,EAAMC,GAAN,EAAWC,OAAX,CAAtB;AACD,GAFD,MAEO;AACL,WAAOI,MAAP;AACD;AACF,CATD;;AAUA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAW;AAC5B,kBAAwCb,QAAQ,CAC9CI,eAAe,CAAC,CAAD,EAAI,GAAJ,EAASS,KAAK,CAACC,UAAf,CAD+B,CAAhD;AAAA;AAAA,MAAOC,YAAP;AAAA,MAAqBC,eAArB;;AAGA,mBAA4BhB,QAAQ,CAAC,CAAD,CAApC;AAAA;AAAA,MAAOiB,MAAP;AAAA,MAAeC,SAAf;;AACA,MAAMC,UAAU,GAAGpB,MAAM,CAAC,CAAD,CAAzB;AACA,MAAMqB,WAAW,GAAGrB,MAAM,CAAC,GAAD,CAA1B;AACA,MAAQe,UAAR,GAAmCD,KAAnC,CAAQC,UAAR;AAAA,MAAoBO,UAApB,GAAmCR,KAAnC,CAAoBQ,UAApB;AACApB,EAAAA,SAAS,CAAC,YAAM;AACdqB,IAAAA,OAAO,CAACC,GAAR,CAAYR,YAAZ,EAA0BD,UAA1B;;AACA,QAAIC,YAAY,KAAKD,UAArB,EAAiC;AAC/BO,MAAAA,UAAU,CAACJ,MAAD,CAAV;AACD;AACF,GALQ,EAKN,CAACF,YAAD,EAAeM,UAAf,EAA2BP,UAA3B,CALM,CAAT;;AAMA,MAAMU,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,SAAD,EAAe;AACtC,QACGA,SAAS,KAAK,OAAd,IAAyBV,YAAY,GAAGF,KAAK,CAACC,UAA/C,IACCW,SAAS,KAAK,SAAd,IAA2BV,YAAY,GAAGF,KAAK,CAACC,UAFnD,EAGE;AACAY,MAAAA,KAAK,CAACC,KAAN,CAAY,UAAZ,EAAwB,gCAAxB,EAA0D,CACxD;AAAEC,QAAAA,IAAI,EAAE,OAAR;AAAiBC,QAAAA,KAAK,EAAE;AAAxB,OADwD,CAA1D;AAGA;AACD;;AACD,QAAIJ,SAAS,KAAK,OAAlB,EAA2B;AACzBL,MAAAA,WAAW,CAACU,OAAZ,GAAsBf,YAAtB;AACD,KAFD,MAEO;AACLI,MAAAA,UAAU,CAACW,OAAX,GAAqBf,YAArB;AACD;;AACD,QAAMgB,UAAU,GAAG3B,eAAe,CAChCe,UAAU,CAACW,OADqB,EAEhCV,WAAW,CAACU,OAFoB,EAGhCf,YAHgC,CAAlC;AAKAC,IAAAA,eAAe,CAACe,UAAD,CAAf;AACAb,IAAAA,SAAS,CAAC,UAACc,SAAD;AAAA,aAAeA,SAAS,GAAG,CAA3B;AAAA,KAAD,CAAT;AACD,GAtBD;;AAuBA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC;AAApB,KACE,oBAAC,IAAD,yBADF,EAEE,oBAAC,cAAD,QAAiBnB,YAAjB,CAFF,EAGE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEkB,MAAM,CAACE;AAApB,KACE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,OAAd;AAAsB,IAAA,OAAO,EAAEX,gBAAgB,CAACY,IAAjB,CAAsB,KAAtB,EAA4B,OAA5B;AAA/B,IADF,EAEE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAC,SADR;AAEE,IAAA,OAAO,EAAEZ,gBAAgB,CAACY,IAAjB,CAAsB,KAAtB,EAA4B,SAA5B;AAFX,IAFF,CAHF,CADF;AAaD,CAlDD;;AAoDA,eAAexB,UAAf;AACA,IAAMqB,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC/BJ,EAAAA,MAAM,EAAE;AACNK,IAAAA,IAAI,EAAE,CADA;AAENC,IAAAA,OAAO,EAAE,EAFH;AAGNC,IAAAA,UAAU,EAAE;AAHN,GADuB;AAM/BN,EAAAA,eAAe,EAAE;AACfO,IAAAA,aAAa,EAAE,KADA;AAEfC,IAAAA,cAAc,EAAE,cAFD;AAGfC,IAAAA,SAAS,EAAE,EAHI;AAIfC,IAAAA,KAAK,EAAE,GAJQ;AAKfC,IAAAA,QAAQ,EAAE;AALK;AANc,CAAlB,CAAf","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport { Alert, Button, StyleSheet, Text, View } from \"react-native\";\nimport Card from \"./Card\";\nimport NumberContiner from \"./NumberContiner\";\nconst generatebetween = (min, max, exclude) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  const random = Math.floor(Math.random() * (max - min)) + min;\n  if (random === exclude) {\n    return generatebetween(min, max, exclude);\n  } else {\n    return random;\n  }\n};\nconst GameScreen = (props) => {\n  const [currentGuess, setCurrentGuess] = useState(\n    generatebetween(1, 100, props.userChoice)\n  );\n  const [rounds, setrounds] = useState(0);\n  const currentLow = useRef(1);\n  const currentHigh = useRef(100);\n  const { userChoice, onGameOver } = props;\n  useEffect(() => {\n    console.log(currentGuess, userChoice);\n    if (currentGuess === userChoice) {\n      onGameOver(rounds);\n    }\n  }, [currentGuess, onGameOver, userChoice]);\n  const nextguessHandler = (direction) => {\n    if (\n      (direction === \"lower\" && currentGuess < props.userChoice) ||\n      (direction === \"greater\" && currentGuess > props.userChoice)\n    ) {\n      Alert.alert(\"dont Lie\", \"You know that this is wrong...\", [\n        { text: \"sorry\", style: \"cancel\" },\n      ]);\n      return;\n    }\n    if (direction === \"lower\") {\n      currentHigh.current = currentGuess;\n    } else {\n      currentLow.current = currentGuess;\n    }\n    const nextnumber = generatebetween(\n      currentLow.current,\n      currentHigh.current,\n      currentGuess\n    );\n    setCurrentGuess(nextnumber);\n    setrounds((currounds) => currounds + 1);\n  };\n  return (\n    <View style={styles.screen}>\n      <Text>Opponent Guess</Text>\n      <NumberContiner>{currentGuess}</NumberContiner>\n      <Card style={styles.buttonContainer}>\n        <Button title=\"LOWER\" onPress={nextguessHandler.bind(this, \"lower\")} />\n        <Button\n          title=\"GREATER\"\n          onPress={nextguessHandler.bind(this, \"greater\")}\n        />\n      </Card>\n    </View>\n  );\n};\n\nexport default GameScreen;\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 10,\n    alignItems: \"center\",\n  },\n  buttonContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    marginTop: 20,\n    width: 300,\n    maxWidth: \"80%\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}